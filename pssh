#!/usr/bin/env perl

use warnings;
use strict;

use YAML::Tiny;

our $VERSION = '0.9.2';
our $PUBDATE = '2014 Jul 2';

use constant FILE_KNOW_HOSTS    => "$ENV{'HOME'}/.ssh/known_hosts";
use constant FILE_PSSH_CONFIG   => "$ENV{'HOME'}/.ssh/pssh_config";
use constant STR_SEPARATE       => '=' x 60;

use constant SSH_DEFAULT_PORT   => 22;

chomp(my $BIN_SSH   = `which ssh`);
chomp(my $BIN_MOSH  = `which mosh`);
chomp(my $BIN_PING  = `which ping`);
chomp(my $BIN_SCP   = `which scp`);


#############################################
# global variables
#############################################

our @sites = ();
our $pssh_config = undef;
our @pssh_menu = ();
our @pssh_noclass_sites = ();

#############################################
# sub routine
#############################################

sub user_input()
{
    my ($code, $input) = (0, undef);

    while (1) {
        print "Please input your selection: ";
        $input = <>;

        if (defined($input)) {
            chomp($input);
            last if ($input ne '');
        }
        else {
            print "\n";
        }
    }

    if ($input =~ /^(q|quit|exit|bye)$/i) {
        print "\e[1;31mbye!\e[m\n";
        $code = 1;
    }
    elsif ($input =~ /^(qq|\.\.\/?)$/) {
        $input = undef;
        $code = 2;
    }

    return ($code, $input);
}

sub parse_cmd($)
{
    my $input = shift @_;
    my $spawn = do {
        if ($input =~ /^(\w+)\s/) {
            my $cmd = $1;
            $input =~ s/^$cmd\s+//;

            if ($cmd =~ /^m(osh)?$/)    { $BIN_MOSH }
            #elsif ($cmd =~ /^s(sh)?$/) { $BIN_SSH }
            elsif ($cmd =~ /^p(ing)?$/) { $BIN_PING }
            elsif ($cmd =~ /^scp$/)     { $BIN_SCP }
            else                        { $BIN_SSH }
        }
        else    { $BIN_SSH }
    };

    return ($spawn, $input);
}

sub spawn_scp(@)
{
    my ($scp_cmd, $remote_host, @extra_args) = @_;
    my $error = undef;

    print "  * Use scp, please provide target >> ";
    my $target = <>;
    chomp $target;

    if ($target =~ /^(-r\s+)/) {
        push @extra_args, '-r';
        $target =~ s/^$1//;
    }

    if ($target =~ /([^ ]+)\s+([^ ]+)$/) {
        my ($src, $dst) = ($1, $2);

        if ($src =~ /^:/ and ! ($dst =~ /^:/)) {
            $src = "${remote_host}${src}";
        }
        elsif ($dst =~ /^:/ and ! ($src =~ /^:/)) {
            $dst = "${remote_host}${dst}";
        }
        else {
            $error = "Error format";
            return (1, $error);
        }

        if (@extra_args) {
            system $scp_cmd, @extra_args, $src, $dst
        }
        else {
            system $scp_cmd, $src, $dst;
        }
        return (0, $error);
    }
}

sub test_fill_class(@)
{
    my ($test, $method, $class_name) = @_;

    if ($method eq 'host') {
        foreach my $shash (@sites) {
            next if (exists($shash->{classes}) and exists($shash->{classes}->{$class_name}));
            if ($test eq $shash->{host} or $test eq $shash->{ip}) {
                # reference modification
                $shash->{classes}->{$class_name} = 1;
            }
        }
    }
    elsif ($method eq 'regexp') {
        my $regexp = qr/$test/i;
        foreach my $shash (@sites) {
            next if (exists($shash->{classes}) and exists($shash->{classes}->{$class_name}));
            if ($shash->{host} =~ $regexp or $shash->{ip} =~ $regexp) {
                # reference modification
                $shash->{classes}->{$class_name} = 1;
            }
        }
    }
}

sub classify_sites()
{
    # for readability
    my $pssh_classes = $pssh_config->{classes};

    foreach (@$pssh_classes) {
        next if (!exists($_->{class}));

        my $class_name = $_->{class};

        if (exists($_->{host})) {
            foreach (@{$_->{host}}) {
                test_fill_class($_, 'host', $class_name);
            }
        }

        if (exists($_->{regexp})) {
            foreach (@{$_->{regexp}}) {
                test_fill_class($_, 'regexp', $class_name);
            }
        }

        my @index = grep { exists($sites[$_]->{classes}->{$class_name}) } (0..$#sites);
        $_->{index} = \@index;
        $_->{count} = scalar @index;
    }

    # collect valid classes
    foreach (0..$#$pssh_classes) {
        next if (!exists($pssh_classes->[$_]->{class}) or $pssh_classes->[$_]->{count} == 0);
        push @pssh_menu, $_;
    }

    # collect un-classfied sites
    foreach (0..$#sites) {
        next if (exists($sites[$_]->{classes}) and %{$sites[$_]->{classes}});
        push @pssh_noclass_sites, $_;
    }
}

sub config_parse()
{
    # pclin.140516:
    #  the primary reason we use list (instead of hash) in classes is,
    #  user can arrange the listing orders as they can see on menu

    $pssh_config = (YAML::Tiny->read(FILE_PSSH_CONFIG))->[0];#->{classes};

    foreach (0..$#{$pssh_config->{classes}}) {
        if (!exists($pssh_config->{classes}->[$_]->{class})) {
            # empty element, but still exists
            delete $pssh_config->{classes}->[$_];
        }
    }
}

sub parse_known_hosts()
{
    open FR, '<', FILE_KNOW_HOSTS;
    my @c = <FR>;
    close FR;
    chomp(@c);

    foreach (@c) {
        next if /^#/;
        my @hs = split /,/, (split / /)[0];

        my ($host, $ip, $port) = ('', '', SSH_DEFAULT_PORT);
        foreach (@hs) {
            my $str = $_;
            if (/\[(.+)\]:(\d+)/)
            {
                $str = $1;
                $port = $2;
            }

            if ($str =~ /(\d+\.){3}\d+/) {
                $ip = $str;
            }
            else {
                $host = $str;
            }
        }
        my %hh = (
            'host'  => $host,
            'ip'    => $ip,
            'port'  => $port
        );
        push @sites, \%hh;
    }
}

sub menu_output(@)
{
    my ($error, $class_level) = @_;

    # for readability
    my $pssh_classes = $pssh_config->{classes};

    system('clear');
    if ($error ne '') {
        print $error, "\n";
    }

    my $i = 0;
    if (defined $class_level) {
        my $class_name = $pssh_classes->[$class_level]->{class};
        my $sep_len = (60 - (length $class_name) - 2) / 2;
        print '=' x $sep_len, "\e[1;33;46m ", $class_name, " \e[m", '=' x $sep_len, "\n";
        foreach (@{$pssh_classes->[$class_level]->{index}}) {
            $i++;
            my $host = $sites[$_]->{'host'};
            $host .= ":$sites[$_]->{'port'}" if ($sites[$_]->{'port'} != SSH_DEFAULT_PORT);
            printf "[\e[36m%2d\e[m] %*s%s\n", $i, -36, $host, $sites[$_]->{'ip'};
        }
    }
    else {
        print STR_SEPARATE, "\n";

        # level undefined: main menu
        foreach (@pssh_menu) {
            $i++;
            printf "[\e[36m%2d\e[m] \e[1;33m%*s \e[36m[%d]\e[m\n", $i, -35, $pssh_classes->[$_]->{class}, $pssh_classes->[$_]->{count};
        }

        foreach (@pssh_noclass_sites) {
            $i++;
            my $host = $sites[$_]->{'host'};
            $host .= ":$sites[$_]->{'port'}" if ($sites[$_]->{'port'} != SSH_DEFAULT_PORT);
            printf "[\e[36m%2d\e[m] %*s%s\n", $i, -36, $host, $sites[$_]->{'ip'};
        }
    }

    ## pclin.140517:
    ##   maybe put config here: want to see those hosts already have class in 1st level menu?
    #foreach my $site_hash (@sites)
    #{
    #    $i++;
    #    my $host = $site_hash->{'host'};
    #    $host .= ":$site_hash->{'port'}" if ($site_hash->{'port'} != SSH_DEFAULT_PORT);
    #    printf "[\e[36m%2d\e[m] %-36s%s\n", $i, $host, $site_hash->{'ip'};
    #}
    print STR_SEPARATE, "\n";

    return $i;
}

sub get_target($)
{
    my $hash = shift @_;

    my $target = $hash->{'host'};
    $target = $hash->{'ip'} if ($target eq '');

    return ($target, $hash->{'port'});
}

sub try_input_match($)
{
    my $try = shift @_;

    foreach my $site_hash (@sites) {
        if ($site_hash->{'host'} =~ /$try/i) {
            return get_target($site_hash);
        }
    }
    return;
}

#############################################
# main rountine
#############################################

sub main(@)
{
    my $error_msg = '';
    my $ret;	# used for save subroutine return value and check
    my $class_level = undef;
    my $menu_item_count = 0;

    if (@_ > 0 and ($_[0] eq '-v' or $_[0] eq '--version')) {
	print sprintf 'pssh %s (%s)', $VERSION, $PUBDATE;
	print "\n",
	      'Copyright (C) 2014 Po-Chien Lin', "\n",
	      'License: FreeBSD', "\n";

	if (-e FILE_PSSH_CONFIG) {
	    print "\n",
		  'Config: ', FILE_PSSH_CONFIG, "\n";
	}
	exit 0;
    }

    # parse known_hosts
    if (! -e FILE_KNOW_HOSTS) {
        print FILE_KNOW_HOSTS, ' not exists, skip.', "\n";
        exit 0;
    }
    parse_known_hosts();

    # read pssh_config
    if (-e FILE_PSSH_CONFIG) {
        config_parse();
    }

    # classify @sites
    classify_sites();

    # main loop
    while (1) {
        $menu_item_count = menu_output($error_msg, $class_level);
        $error_msg = '';

        my $input;
        ($ret, $input) = user_input();

        if ($ret != 0) {
            exit 0 if ($ret == 1);

            if ($ret == 2) {
                # redraw menu
                $class_level = $input;
                next;
            }
        }

        my $USE_CMD;
        ($USE_CMD, $input) = parse_cmd($input);

        my ($target_host, $target_port) = ('', '');

        if ($input =~ /^[-+]?\d+$/) {
            if ($input < 0 or $input > $menu_item_count) {
                $error_msg = 'Selection out of range.';
                next;
            }

            if (defined $class_level) {
                my $pssh_classes = $pssh_config->{classes};
                my $selection = $pssh_classes->[$class_level]->{index}->[$input - 1];
                ($target_host, $target_port) = get_target($sites[$selection]);
            }
            else {
                if ($input > 0 and $input <= @pssh_menu) {
                    $class_level = $pssh_menu[$input - 1];

                    next;   # redraw menu
                }
                else {
                    # no class item
                    #($target_host, $target_port) = get_target($sites[$input - 1]);
                    my $selection = $pssh_noclass_sites[$input - @pssh_menu - 1];
                    ($target_host, $target_port) = get_target($sites[$selection]);
                }
            }

        }
        else {
            ($target_host, $target_port) = try_input_match($input);
            if (!defined($target_host)) {
                if ($input =~ /:/) {
                    ($target_host, $target_port) = split /:/, $input;
                } else {
                    ($target_host, $target_port) = ($input, SSH_DEFAULT_PORT);
                }
                my $test_ping = system "ping -c1 ${target_host} >/dev/null 2>&1";
                if ($test_ping != 0) {
                    $error_msg = 'Cannot find matched item.';
                    next;
                }
            }
        }

        my $c = $USE_CMD;
        $c =~ s,.*/,,;	# basename of CMD

        my @extra_args = ();
        if ($target_port != SSH_DEFAULT_PORT) {
            if ($c eq 'ssh') {
                push @extra_args, "-p $target_port";
            }
            elsif ($c eq 'mosh') {
                push @extra_args, "--ssh=ssh -p $target_port";
            }
            elsif ($c eq 'scp') {
                push @extra_args, "-P $target_port";
            }
        }

        print "Trying connection to \e[36m$target_host\e[m with \e[33m$c\e[m ...\n";
        if ($c eq 'scp') {
            ($ret, $error_msg) = spawn_scp($USE_CMD, $target_host, @extra_args);
            exit 0 unless ($ret != 0);
            # others go next;
        }
        elsif (@extra_args) {
            system $USE_CMD, $target_host, @extra_args;
        }
        else {
            system $USE_CMD, $target_host;
        }
    }
}

main(@ARGV);

__END__
